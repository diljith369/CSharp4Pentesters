using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace KeyandIVGen
{
    public partial class GenIVandKeyForm : Form
    {
        private bool bmouseDown;
        private Point ptlastLocation;
        public GenIVandKeyForm()
        {
            InitializeComponent();
        }

        private void btnGetKeyandIV_Click(object sender, EventArgs e)
        {
            txtKey.Text = Convert.ToBase64String(GetKey(32));
            txtIV.Text = Convert.ToBase64String(GetIV(16));
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }


        private byte[] GetIV(int num)
        {
            var randomBytes = new byte[num]; // 32 Bytes will give us 256 bits.

            using (var rngCsp = new RNGCryptoServiceProvider())
            {
                // Fill the array with cryptographically secure random bytes.
                rngCsp.GetBytes(randomBytes);
            }

            return randomBytes;
        }

        private byte[] GetKey(int size)
        {
            char[] caRandomChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()".ToCharArray();
            byte[] baKey = new byte[size];
            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())
            {
                crypto.GetBytes(baKey);
            }
            return baKey;
        }

        private void GenIVandKeyForm_MouseDown(object sender, MouseEventArgs e)
        {
           bmouseDown = true;
            ptlastLocation = e.Location;
        }

        private void GenIVandKeyForm_MouseUp(object sender, MouseEventArgs e)
        {
            bmouseDown = false;
        }

        private void GenIVandKeyForm_MouseMove(object sender, MouseEventArgs e)
        {
            if (bmouseDown)
            {
                this.Location = new Point(
                    (this.Location.X - ptlastLocation.X) + e.X, (this.Location.Y - ptlastLocation.Y) + e.Y);

                this.Update();
            }
        }
    }
}
